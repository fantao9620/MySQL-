数据库基础概述
数据库管理系统概述
– 数据库（DB）是一种专门存储信息和维护信息的容器，严格
地说数据库是“按照数据结构来组织、存储和管理信息的仓
库”。
– 数据库管理系统（Database Management System－DBMS）管
理数据库的软件。具有对数据存储、安全、一致性、并发操
作、恢复和访问等功能。
– 数据词典（系统目录），也是一种数据，只不过这些数据记
录的是数据库中存放的各种对象的定义信息和其他一些辅助
管理信息，包括名字、结构、位置、类型等。这些数据被称
为元数据（metadata）
数据管理主要经历过程：
– 手工管理阶段 ：应用程序管理数据、数据不保存、不共享、
不具有独立性。
– 文件管理阶段 ：文件系统管理数据、数据可长期保存、但
共享性差、冗余度大、独立性差。
– 数据管理阶段：数据库系统管理数据、数据结构复杂、冗余
小、易扩充、较高的独立性、统一数据控制。
人工管理阶段：
– 早期的数据处理都是通过手工进行的，那时的计算机多用于科学
计算。每个应用程序根据需求组织数据，数据与程序一一对应，
一个程序的数据一般不能被其他程序使用。如图所示。
– 此阶段没有专门的数据管理软件，程序员既要考虑数据的逻辑结
构，还要设计存储数据的物理结构及存取方法等
文件系统阶段：
– 随着操作系统的诞生，文件系统也作为操作系统的一个子系统应
运而生了。应用程序可以通过文件系统将的数据组织成一个文件。
文件系统提供对文件的访问和管理接口。文件系统阶段程和数据
的关系如图所示。这种方式多用于早期的单机信息管理系统。
文件系统不足：
– 文件系统虽然提供了统一的存取方法来操作数据，但保存数据的
格式和结构却由应用程序自定义。从文件中读取数据后，需要自
行解析数据。
– 数据量比较大时检索数据的效率通常很低。
– 数据冗余度大，相同的数据集合中不同应用程序中使用，经常需
要重复定义、重复存储。例如，人事部的档案管理系统和财务部
的工资管理系统用到的很多数据是重复的。它们各自使用自己的
文件来存储数据
– 数据不一致性，由于数据重复存储、单独管理，给数据维护带来
难度，容易造成数据不一致。
文件系统阶段：
– 数据库系统是由计算机软件和硬件资源组成的系统，它实现了有组织地、
动态地存储大量关联数据，便于多用户访问。数据库系统与文件系统的
重要区别是数据的充分共享、交叉访问，应用程序的高度独立性。文件
系统阶段程和数据的关系如图所示。
– 数据库对数据的存储是按照同一结构进行的，不同应用程序都可以直接
操作这些数据。数据库系统对数据的完整性、唯一性和安全性都提供有
效的管理手段。数据库系统还提供管理和控制数据的简单操作命令。
数据库的特征：
– 数据结构化
– 实现数据共享
– 减少数据冗余
– 数据独立性
数据库类型
– 按数据模型特点分：
• 网状型数据库
• 层次型数据库
• 关系型数据库 
MySQL体系结构
Connectors:用来与客户端应用程序建立连接的数据库接口
• Management Services & Utilities:系统管理和服务控制相关的
辅助工具
• Connection Pool：负责处理与用户访问有关的各种用户登录、线
程处理、内存和进程缓存需求
• Sql Interface：提供从用户接受命令并把结果返回给用户的机制
• Parser:对SQL语句进行语法分析和解析，构造一个月来执行查询
的数据结构
• Optimizer:优化查询语句，以保证数据检索动作的效率达到或者
非常接近最最优。使用一种“选取-投影-联结”策略来处理查询，
即先根据有关的限制条件进行选取(Select 操作)以减少将要处理
的元组个数，再进行投影以减少被选取元组力的属性字段的个数，
最后根据连接条件生产最终的查询结果
Caches & Buffers：保证使用频率最高的数据或结构能够以最有效
率的方式被访问，缓存的类型有：表缓存、记录缓存、键缓存、权
限缓存、主机名缓存等。
最与众不同的特点是插件式存储引擎
• 插件式表存储引擎是底层物理结构的实现，负责为数据库执行
实际的数据I/O操作，它是基于表而不是数据库的。可以根据实
际应用需求为每个表设定不同的选择。
• 插件式存储引擎的核心是文件访问层的一个抽象接口，任何人
都可以利用这个API接口去建立新的文件访问机制
存储引擎就是如何存储数据、如何为存储的数据建立索引和
如何更新、查询数据等技术的实现方法。因为在关系数据库中
数据的存储是以表的形式存储的，所以存储引擎简而言之就是
指表的类型。数据库的存储引擎决定了表在计算机中的存储方
式。
• 在Oracle和SQL Server等数据库中只有一种存储引擎，所有
数据存储管理机制都是一样的。而MySQL数据库提供了多种存储
引擎，用户可以根据不同的需求为数据表选择不同的存储引擎，
用户也可以根据自己的需要编写自己的存储引擎，MySQL的核心
就是存储引擎。

存储引擎
InnoDB存储引擎的特点:
– 支持外键（Foreign Key）
– 支持事务（Transaction）：如果某张表主要提供OLTP支持，
需要执行大量的增、删、改操作（insert、delete、update
语句），出于事务安全方面的考虑，InnoDB存储引擎是更好
的选择。
– 最新版本的MySQL已经开始支持全文检索
MyISAM存储引擎的特点：
– MyISAM具有检查和修复表的大多数工具。
– MyISAM表可以被压缩
– MyISAM表最早支持全文索引
– 但MyISAM表不支持事务
– 但MyISAM表不支持外键（Foreign Key）。
• 如果需要执行大量的select语句，出于性能方面的考虑，
MyISAM存储引擎是更好的选择。
MEMORY存储引擎：
– MEMORY存储引擎是MySQL中一类特殊的存储引擎。该存储引擎
使用存在于内存中的内容来创建表，每个表实际对应一个磁
盘文件，格式为.frm。这类表因为数据在内存中，且默认使
用HASH索引，所以访问速度非常快；但一旦服务关闭，表中
的数据会丢失。
– 每个MEMORY表可以放置数据量的大小受max_heap_table_size
系统变量的约束，初始值为16MB，可按需求增大。此外，在
定义MEMORY表时可通过MAX_ROWS子句定义表的最大行数。
– 该存储引擎主要用于那些内容稳定的表，或者作为统计操作
的中间表。对于该类表需要注意的是，因为数据并没有实际
写入磁盘，一旦重启，则会丢失。
 MySQL5.7默认的默认的存储引擎是InnoDB。
使用MySQL命令
set default_storage_engine=MyISAM;
可以“临时地”将MySQL“当前会话的”存储引擎设置为MyISAM，
使用MySQL命令“show engines;”可以查看当前MySQL服务实例
默认的存储引擎。
MySQL字符集
字符(Character)是指人类语言最小的表义符号，例如'A'、'B'等。
• 给定一系列字符，对每个字符赋予一个数值，用数值来代表对
应的字符，这个数值就是字符的编码(Character Encoding)。
• 给定一系列字符并赋予对应的编码后，所有这些字符和编码对
组成的集合就是字符集(Character Set)。MySQL中提供了多种字
符集，例如latin1、utf8、gbk等。
• 字符序(Collation)是指在同一字符集内字符之间的比较规则。
只有确定字符序后，才能在一个字符集上定义什么是等价的字符，
以及字符之间的大小关系。每个字符序唯一对应一种字符集，一
个字符集可以对应多种字符序，其中有一个是默认字符序
(Default Collation)。
MySQL中的字符序命名规则：以字符序对应的字符集名称开头，
以国家名居中（或以general居中），以ci或cs或bin末尾。例如：
latin1字符集对应有latin1_swedish_ci、latin1_spanish_ci、
latin1_german1_ci等字符序。以ci结尾的字符序表示大小写不敏
感；以cs结尾的字符序表示大小写敏感；以bin结尾的字符序表示
按编码值比较。例如在字符序gbk_general_ci规则中，字符'a'和
'A'是等价的。
character_set_client：客户端（MySQL命令窗口）的字符集
（未加说明的是latin1字符集）
• character_set_connection：连接层字符集
• character_set_database：当前选中数据库的字符集
• character_set_filesystem：MySQL服务器文件系统的字符集，
默认的字符集为binary
• character_set_results：结果集的字符集
• character_set_server：MySQL服务器的字符集
• character_set_system：元数据(字段名、表名、数据库名等)字
符集，默认的字符集为utf8

1.专业词db,dbms,dbs
2.数据库类型:网状,层次,关系(表)
3.关系型数据库:mysql\oracle\sqlserver\db2
4.mysql特色;存储引擎,innoDB(增删改-安全性)\myisam(查-性能)
